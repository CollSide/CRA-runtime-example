{"version":3,"sources":["logo.svg","../i18n sync /^/.//.*/.po/.json$","cookie.js","i18nInit.js","GithubRibbon.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","map","./uk.po.json","webpackContext","req","id","webpackContextResolve","e","Error","code","keys","Object","resolve","set","key","value","document","cookie","concat","LOCALE_COOKIE","locale","split","c","find","_ref","slicedToArray","trimStart","translationsObj","require","addLocale","useLocale","GithubRibbon","react_default","a","createElement","href","style","position","top","right","border","src","alt","setLocale","ev","preventDefault","saveLocale","window","location","reload","LangSwitcher","className","t","_templateObject","onClick","App","appLink","App_LangSwitcher","logo","jt","_templateObject2","target","rel","_templateObject3","_templateObject4","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,8GCAxC,IAAAC,EAAA,CACAC,eAAA,IAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAL,EAAAM,GAEA,SAAAC,EAAAF,GACA,IAAAC,EAAAJ,EAAAG,GACA,KAAAC,EAAA,IACA,IAAAE,EAAA,IAAAC,MAAA,uBAAAJ,EAAA,KAEA,MADAG,EAAAE,KAAA,mBACAF,EAEA,OAAAF,EAEAF,EAAAO,KAAA,WACA,OAAAC,OAAAD,KAAAT,IAEAE,EAAAS,QAAAN,EACAT,EAAAC,QAAAK,EACAA,EAAAE,GAAA,q0CChBaQ,EAAM,SAACC,EAAKC,GACvBC,SAASC,OAAT,GAAAC,OAAqBJ,EAArB,KAAAI,OAA4BH,ICLxBI,EAAgB,WAWtB,IAAMC,EDda,SAACN,GAClB,IAAMG,EAASD,SAASC,OAAOI,MAAM,KACpCpB,IAAI,SAACqB,GAAD,OAAOA,EAAED,MAAM,OACnBE,KAAK,SAAAC,GAAA,OAAAb,OAAAc,EAAA,EAAAd,CAAAa,EAAA,MAA6BE,cAAgBZ,IACnD,OAAOG,GAAUA,EAAO,GCEjBA,CAAWE,IAAkB,KAUtC,GAAe,OAAXC,EAAiB,CACnB,IAAMO,EAAkBC,MAAQ,KAAAV,OAAWE,EAAZ,aAC/BS,oBAAUT,EAAQO,GAClBG,oBAAUV,GCjBG,IAAAW,EAAA,kBACbC,EAAAC,EAAAC,cAAA,KAAGC,KAAK,mDACNH,EAAAC,EAAAC,cAAA,OAAKE,MAAO,CAACC,SAAU,WAAYC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GAC3DC,IAAI,wEACJC,IAAI,+XCCV,IAAMC,EAAY,SAACvB,GAAD,OAAY,SAACwB,GAC7BA,EAAGC,iBFCE,SAAoBzB,GACzBH,EAAWE,EAAeC,GED1B0B,CAAW1B,GACX2B,OAAOC,SAASC,WAGZC,EAAe,kBACnBlB,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,eACbnB,EAAAC,EAAAC,cAAA,UAAMkB,YAANC,MACArB,EAAAC,EAAAC,cAAA,KAAGC,KAAK,IAAImB,QAASX,EAAU,OAA/B,MACAX,EAAAC,EAAAC,cAAA,KAAGC,KAAK,IAAImB,QAASX,EAAU,OAA/B,QAsCWY,mLAhCX,IAAMC,EAAUxB,EAAAC,EAAAC,cAAA,0BAChB,OACEF,EAAAC,EAAAC,cAAA,OAAKiB,UAAU,OACbnB,EAAAC,EAAAC,cAAA,UAAQiB,UAAU,cAChBnB,EAAAC,EAAAC,cAACuB,EAAD,MACAzB,EAAAC,EAAAC,cAAA,OAAKO,IAAKiB,IAAMP,UAAU,WAAWT,IAAI,SACzCV,EAAAC,EAAAC,cAAA,SACIyB,aADJC,IACeJ,IAEfxB,EAAAC,EAAAC,cAAA,KACEiB,UAAU,WACVhB,KAAK,sBACL0B,OAAO,SACPC,IAAI,uBAEFV,YANJW,MAQA/B,EAAAC,EAAAC,cAAA,KACEiB,UAAU,WACVhB,KAAK,sBACL0B,OAAO,SACPC,IAAI,uBAEFV,YANJY,OASFhC,EAAAC,EAAAC,cAACH,EAAD,cA5BUkC,aCTEC,QACW,cAA7BnB,OAAOC,SAASmB,UAEe,UAA7BpB,OAAOC,SAASmB,UAEhBpB,OAAOC,SAASmB,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASvD,SAASwD,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8d0984a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","var map = {\n\t\"./uk.po.json\": 26\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 25;","export const get = (key) => {\n  const cookie = document.cookie.split(';')\n  .map((c) => c.split('='))\n  .find(([cookieName]) => cookieName.trimStart() === key)\n  return cookie && cookie[1];\n}\n\nexport const set = (key, value) => {\n  document.cookie = `${key}=${value}`;\n}\n","import { addLocale, useLocale } from 'ttag';\nimport * as cookie from './cookie';\n\nconst LOCALE_COOKIE = '__locale';\n\nfunction getLocale() {\n  return cookie.get(LOCALE_COOKIE) || 'en';\n}\n\nexport function saveLocale(locale) {\n  cookie.set(LOCALE_COOKIE, locale);\n}\n\n// setup\nconst locale = getLocale();\n\nif (locale !== 'en') {\n  const translationsObj = require(`../i18n/${locale}.po.json`);\n  addLocale(locale, translationsObj);\n  useLocale(locale);\n}\n","import React from 'react';\n\nexport default () => (\n  <a href=\"https://github.com/ttag-org/CRA-runtime-example\">\n    <img style={{position: 'absolute', top: 0, right: 0, border: 0}}\n      src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png\"\n      alt=\"Fork me on GitHub\"/>\n  </a>\n)\n","import { saveLocale } from './i18nInit';\nimport React, { Component } from 'react';\nimport GithubRibbon from './GithubRibbon';\nimport { t, jt } from 'ttag';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst setLocale = (locale) => (ev) => {\n  ev.preventDefault();\n  saveLocale(locale);\n  window.location.reload();\n}\n\nconst LangSwitcher = () => (\n  <div className=\"Lang-switch\">\n    <h2>{ t`Switch lang`}</h2>\n    <a href='/' onClick={setLocale('uk')}>uk</a>\n    <a href='/' onClick={setLocale('en')}>en</a>\n  </div>\n)\n\nclass App extends Component {\n  render() {\n    const appLink = <code>src/App.js</code>;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <LangSwitcher/>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            { jt`Edit ${ appLink } and save to reload.` }\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            { t`Learn React` }\n          </a>\n          <a\n            className=\"App-link\"\n            href=\"https://ttag.js.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            { t`Learn ttag` }\n          </a>\n        </header>\n        <GithubRibbon />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}